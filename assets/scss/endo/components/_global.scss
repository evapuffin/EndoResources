$endo-colors: () !default;
$endo-colors: map-merge((
"primary": $brand-primary,
"success": $brand-success,
"accent": $brand-accent,
"info": $brand-info,
"warning": $brand-warning,
"danger": $brand-danger,
), $endo-colors);

@mixin brand-bg-variant($parent, $color) {
    #{$parent} {
        background-color: $color !important;
        color: $white;
    }

    a#{$parent},
    button#{$parent} {
        @include hover-focus {
            background-color: darken($color, 10%) !important;
        }
    }
}

@each $color,
$value in $endo-colors {
    @include brand-bg-variant(".bg-#{$color}", $value);
}

@mixin button-outline-variant-custom($color, $color-hover: color-yiq($color), $active-background: $color, $active-border: $color) {
    color: $color;
    background-color: transparent;
    background-image: none;
    border: 1px solid $color;
  
    &:hover {
      color: $color-hover;
      background-color: $active-background;
      border-color: $active-border;
    }
  
    &:focus,
    &.focus {
      box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
    }
  
    &.disabled,
    &:disabled {
      color: $color;
      background-color: transparent;
    }
  
    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
      color: color-yiq($active-background);
      background-color: $active-background;
      border-color: $active-border;
  
      &:focus {
        // Avoid using mixin so we can pass custom focus shadow properly
        @if $enable-shadows and $btn-active-box-shadow != none {
          box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, .5);
        } @else {
          box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
        }
      }
    }
  }
  
@each $color, $value in $endo-colors {
  .btn-outline-#{$color} { 
    @include button-outline-variant-custom($value);
  }
}